{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["generateRandom","Math","round","random","App","useState","message","setMessage","secret","setSecret","playing","setPlaying","guessCount","setGuessCount","useEffect","className","id","onSubmit","event","preventDefault","data","FormData","target","reset","userGuess","parseInt","get","isNaN","type","name","autoComplete","autoFocus","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGA,SAASA,IACP,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,UA4EVC,MAzEf,WACE,IADa,EAGiBC,mBAAS,sBAH1B,mBAGNC,EAHM,KAGGC,EAHH,OAIeF,mBAASL,KAJxB,mBAINQ,EAJM,KAIEC,EAJF,OAKiBJ,oBAAS,GAL1B,mBAKNK,EALM,KAKGC,EALH,OAMwBN,mBALf,GADT,mBAMNO,EANM,KAMMC,EANN,KAmDb,OA3CAC,qBAAW,WACU,IAAfF,IACFL,EAAY,kBACZI,GAAY,MAEb,CAACC,IAuCF,sBAAKG,UAAU,MAAf,UACE,iCACE,mDAEF,uBAAMC,GAAG,OAAOC,SAzCE,SAACC,GAErB,GADAA,EAAMC,kBACU,IAAZT,EACFD,EAAUT,KACVW,GAAW,GACXJ,EAAW,gBACXM,EApBkB,OAsBf,CACH,IAAMO,EAAO,IAAIC,SAASH,EAAMI,QAChCJ,EAAMI,OAAOC,QACb,IAAMC,EAAYC,SAASL,EAAKM,IAAI,UAEpC,GAAIC,MAAMH,GAER,YADAjB,EAAW,wCAGR,GAAIiB,EAAY,IAEnB,YADAjB,EAAW,wCAITiB,IAAchB,GAChBD,EAAW,sCAAwCC,GACnDG,GAAW,IAEJa,EAAYhB,GACnBD,EAAW,8BAAgCiB,GAC3CX,EAAeD,EAAa,IAErBY,EAAYhB,IACnBD,EAAW,6BAA+BiB,GAC1CX,EAAeD,EAAa,MAS9B,UACE,uBACEgB,KAAK,OACLC,KAAK,QACLC,aAAa,WACbC,UAAU,OACVC,UAAWtB,IAEb,wBAAQkB,KAAK,SAASb,UAAYL,EAAU,GAAK,OAAjD,SACIA,EAAUE,GAAeA,EAAa,EAAI,WAAa,UAAY,oBAGzE,mBAAGG,UAAU,UAAb,SAAwBT,QC/Df2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1463b161.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport './App.css';\n\nfunction generateRandom() {\n  return Math.round(Math.random() * 100)\n}\n\nfunction App() {\n  const maxGuessCount = 6\n\n  const [message, setMessage] = useState('You have '+ maxGuessCount + ' guesses')\n  const [secret, setSecret] = useState(generateRandom())\n  const [playing, setPlaying] = useState(true)\n  const [guessCount, setGuessCount ] = useState( maxGuessCount )\n\n  useEffect( () => {\n    if( guessCount === 0 ) {\n      setMessage( 'Out of guesses')\n      setPlaying( false )\n    }\n  }, [guessCount] )\n\n  const SubmitHandler = (event) => {\n    event.preventDefault()\n    if (playing === false) {\n      setSecret(generateRandom())\n      setPlaying(true)\n      setMessage('Have a guess')\n      setGuessCount( maxGuessCount )\n    }\n    else {\n      const data = new FormData(event.target)\n      event.target.reset()\n      const userGuess = parseInt(data.get('guess'))\n      // verify that a number has been entered\n      if (isNaN(userGuess)) {\n        setMessage('Only a number between 0-100 accepted')\n        return\n      }\n      else if (userGuess > 100) {\n        setMessage('Only a number between 0-100 accepted')\n        return\n      }\n      // verify if user guess matches secret\n      if (userGuess === secret) {\n        setMessage('You guessed correct! The number is ' + secret)\n        setPlaying(false)\n      }\n      else if (userGuess > secret) {\n        setMessage('The number is smaller than ' + userGuess)\n        setGuessCount( guessCount - 1 )\n      }\n      else if (userGuess < secret) {\n        setMessage('The number is larger than ' + userGuess)\n        setGuessCount( guessCount - 1 )\n      }\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Guess My Number</h1>\n      </header>\n      <form id=\"form\" onSubmit={SubmitHandler}>\n        <input \n          type=\"text\" \n          name=\"guess\" \n          autoComplete=\"password\" \n          autoFocus=\"true\" \n          disabled={ playing ? false : true }\n        />\n        <button type=\"submit\" className={ playing ? \"\" : \"play\"}>\n          { playing ? guessCount + ( guessCount > 1 ? \" Guesses\" : \" Guess\") : \"Play again? \" }\n        </button>\n      </form>\n      <p className=\"message\">{message}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}